// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package messager

import (
	"sync"

	"github.com/umputun/secrets/app/store"
)

// Ensure, that EngineMock does implement Engine.
// If this is not the case, regenerate this file with moq.
var _ Engine = &EngineMock{}

// EngineMock is a mock implementation of Engine.
//
//	func TestSomethingThatUsesEngine(t *testing.T) {
//
//		// make and configure a mocked Engine
//		mockedEngine := &EngineMock{
//			IncErrFunc: func(key string) (int, error) {
//				panic("mock out the IncErr method")
//			},
//			LoadFunc: func(key string) (*store.Message, error) {
//				panic("mock out the Load method")
//			},
//			RemoveFunc: func(key string) error {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(msg *store.Message) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedEngine in code that requires Engine
//		// and then make assertions.
//
//	}
type EngineMock struct {
	// IncErrFunc mocks the IncErr method.
	IncErrFunc func(key string) (int, error)

	// LoadFunc mocks the Load method.
	LoadFunc func(key string) (*store.Message, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(key string) error

	// SaveFunc mocks the Save method.
	SaveFunc func(msg *store.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// IncErr holds details about calls to the IncErr method.
		IncErr []struct {
			// Key is the key argument value.
			Key string
		}
		// Load holds details about calls to the Load method.
		Load []struct {
			// Key is the key argument value.
			Key string
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Key is the key argument value.
			Key string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Msg is the msg argument value.
			Msg *store.Message
		}
	}
	lockIncErr sync.RWMutex
	lockLoad   sync.RWMutex
	lockRemove sync.RWMutex
	lockSave   sync.RWMutex
}

// IncErr calls IncErrFunc.
func (mock *EngineMock) IncErr(key string) (int, error) {
	if mock.IncErrFunc == nil {
		panic("EngineMock.IncErrFunc: method is nil but Engine.IncErr was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockIncErr.Lock()
	mock.calls.IncErr = append(mock.calls.IncErr, callInfo)
	mock.lockIncErr.Unlock()
	return mock.IncErrFunc(key)
}

// IncErrCalls gets all the calls that were made to IncErr.
// Check the length with:
//
//	len(mockedEngine.IncErrCalls())
func (mock *EngineMock) IncErrCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockIncErr.RLock()
	calls = mock.calls.IncErr
	mock.lockIncErr.RUnlock()
	return calls
}

// Load calls LoadFunc.
func (mock *EngineMock) Load(key string) (*store.Message, error) {
	if mock.LoadFunc == nil {
		panic("EngineMock.LoadFunc: method is nil but Engine.Load was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	mock.lockLoad.Unlock()
	return mock.LoadFunc(key)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//
//	len(mockedEngine.LoadCalls())
func (mock *EngineMock) LoadCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockLoad.RLock()
	calls = mock.calls.Load
	mock.lockLoad.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *EngineMock) Remove(key string) error {
	if mock.RemoveFunc == nil {
		panic("EngineMock.RemoveFunc: method is nil but Engine.Remove was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(key)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedEngine.RemoveCalls())
func (mock *EngineMock) RemoveCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *EngineMock) Save(msg *store.Message) error {
	if mock.SaveFunc == nil {
		panic("EngineMock.SaveFunc: method is nil but Engine.Save was just called")
	}
	callInfo := struct {
		Msg *store.Message
	}{
		Msg: msg,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(msg)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedEngine.SaveCalls())
func (mock *EngineMock) SaveCalls() []struct {
	Msg *store.Message
} {
	var calls []struct {
		Msg *store.Message
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
